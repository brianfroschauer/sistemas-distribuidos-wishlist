play {
  server {
    http.address = localhost
    http.address = ${?TRANSPORT_HTTP_BIND_ADDRESS}
    https.address = localhost
    https.address = ${?TRANSPORT_HTTPS_BIND_ADDRESS}
    # Ports are hardcoded and the values match the values in the `deployment.yml` kubernetes
    # descriptor. We could use ENV_VAR overwrites to make this more flexible too.
    http.port = 9001
    https.port = 9444
  }
}

## Configures the keystore to use on production mode. You will probably need to use Env Var
## overrides (https://github.com/lightbend/config#optional-system-or-env-variable-overrides)
play.server.https.keyStore.path = conf/selfsigned.keystore

# http://www.playframework.com/documentation/latest/ApplicationSecret
play.http.secret.key = "default-value-used-locally"

# #grpc_enable_client_module
# conf/application.conf
## Modules - https://www.playframework.com/documentation/latest/Modules
play.modules {
  # To enable Akka gRPC clients to be @Injected
  # This Module is generated by the Akka gRPC sbt plugin. See your `target/scala-2.12/src_managed` folder.
  enabled += AkkaGrpcClientModule
}
# #grpc_enable_client_module

# And we can configure the default target where the gRPC services are expected to run:
# (Alternatively Akka service discovery can be used to discover them)
#
#                   ---------------
#                   |              |
# -- (HTTP/1.1) --> > Controller  --> --+
#                   |              |    |
#                   |              |    |
#         +-------> > gRPC Router  |    |
#         |         |              |    |
#         |         ----------------    |
#         |                             |
#         +------------ (HTTP/2) -------+
#
# The settings below configure the client that consumes "helloworld.GreeterService". Because a `host` and `port`
# are used, the client will directly point there. The `ssl-config` section of the settings is required because when
# running this example application we use a self-signed certificate. Therefore we need to tell the client to trust
# the invalid certificate.
akka.grpc.client {

  "helloworld.GreeterService" {
    # default `host` to the address where the server's HTTPS endpoint was bound but use the `DEPLOYMENT_SERVICE_NAME`
    # when available.
    host = ${play.server.https.address}
    host = ${?DEPLOYMENT_SERVICE_NAME}
    port = ${play.server.https.port}
    use-tls = true
    # The Authority on the requests must match the CN on the server certificate. The certificate on
    # `conf/selfsigned.keystore` was issued to `localhost` so we must override the authority.
    override-authority = "localhost"

    # configure ssl to trust our fake certificate chain.
    ssl-config {
      trustManager = {
        stores = [
          {type = "JKS", path = ${user.dir}/conf/selfsigned.keystore}
        ]
      }
    }
  }

  "proto.ProductService" {
        # default `host` to the address where the server's HTTPS endpoint was bound but use the `DEPLOYMENT_SERVICE_NAME`
        # when available.
        host = ${play.server.https.address}
        host = ${?DEPLOYMENT_SERVICE_NAME}
        port = 9443
        use-tls = true
        # The Authority on the requests must match the CN on the server certificate. The certificate on
        # `conf/selfsigned.keystore` was issued to `localhost` so we must override the authority.
        override-authority = "localhost"

        # configure ssl to trust our fake certificate chain.
        ssl-config {
          trustManager = {
            stores = [
              {type = "JKS", path = ${user.dir}/conf/selfsigned.keystore}
            ]
          }
        }
      }

  "proto.UserService" {
    # default `host` to the address where the server's HTTPS endpoint was bound but use the `DEPLOYMENT_SERVICE_NAME`
    # when available.
    host = ${play.server.https.address}
    host = ${?DEPLOYMENT_SERVICE_NAME}
    port = 9444
    use-tls = true
    # The Authority on the requests must match the CN on the server certificate. The certificate on
    # `conf/selfsigned.keystore` was issued to `localhost` so we must override the authority.
    override-authority = "localhost"

    # configure ssl to trust our fake certificate chain.
    ssl-config {
      trustManager = {
        stores = [
          {type = "JKS", path = ${user.dir}/conf/selfsigned.keystore}
        ]
      }
    }
  }
}

play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  db.default.enabled = true
  db.default.autoApply = true
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  #default.driver = org.h2.Driver
  #default.url = "jdbc:h2:mem:play"
  #default.username = sa
  #default.password = ""

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

slick.dbs.default.profile="slick.jdbc.H2Profile$"
slick.dbs.default.db.profile="org.h2.Driver"
slick.dbs.default.db.url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"

play.filters.enabled += "play.filters.csrf.CSRFFilter"
